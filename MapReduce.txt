1. hadoop version
2. javac -version
3. Create a folder "WordCountTutorial" in desktop and create a java file "WordCount.java" in it.
4. Create a folder "input_data", "tutorial_classes" in "WordCountTutorial"
5. Create a new text file named "input.txt" inside "input_data"
6. ~$ export HADOOP_CLASSPATH=$(hadoop classpath)
7. ~$ echo $HADOOP_CLASSPATH
8. ~$ hadoop fs -mkdir /WordCountTutorial
9. ~$ hadoop fs -mkdir /WordCountTutorial/Input
10.~$ hadoop fs -put <*input.txt file*> /WordCountTutorial/Input
11.~$ cd /home/dinesh/Desktop/WordCountTutorial
12.~$ javac -classpath ${HADOOP_CLASSPATH} -d <*tutorial_classes*> <*WordCount.java*>
13.~$ jar -cvf firstTutorial.jar -C tutorial_classes/ .
14.~$ hadoop jar <*firstTutorial.jar*> WordCount /WordCountTutorial/Input /WordCountTutorial/Output
15.~$ hadoop dfs -cat /WordCountTutorial/Output/*


NOTE:

<**> -> can be files or directory that can be drag and dropped!


WordCount.java

import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        word.set(itr.nextToken());
        context.write(word, one);
      }
    }
  }

  public static class IntSumReducer
       extends Reducer<Text,IntWritable,Text,IntWritable> {
    private IntWritable result = new IntWritable();

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      result.set(sum);
      context.write(key, result);
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "word count");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}